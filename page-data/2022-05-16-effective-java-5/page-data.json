{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-05-16-effective-java-5/","result":{"data":{"site":{"siteMetadata":{"title":"수학하는 개발자"}},"markdownRemark":{"id":"72be9954-c9b6-5c25-9a31-32d03fb85256","excerpt":"의존 관계 한 객체가 다른 객체를 생성하거나 메서드를 호출하면, 그 객체에 의존한다고 표현한다. 책에 예시로 나와있는  클래스는 스펠링이 맞는지 틀린지를 판단하는 클래스이기 때문에, 사전 클래스인 를 의존한다. 의존 관계를 정적 유틸리티 클래스와 싱글턴으로 구현 정적 유틸리티 클래스로 구현 싱글턴으로 구현 정적 유틸리티 클래스와 싱글턴으로 구현하게 되면,…","html":"<h3>의존 관계</h3>\n<p>한 객체가 다른 객체를 생성하거나 메서드를 호출하면, 그 객체에 의존한다고 표현한다.</p>\n<p>책에 예시로 나와있는 <code class=\"language-text\">SpellChecker</code> 클래스는 스펠링이 맞는지 틀린지를 판단하는 클래스이기 때문에, 사전 클래스인 <code class=\"language-text\">Dictionary</code>를 의존한다.</p>\n<h3>의존 관계를 정적 유틸리티 클래스와 싱글턴으로 구현</h3>\n<ul>\n<li>\n<p>정적 유틸리티 클래스로 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpellChecker</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Dictionary</span> dictionary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SpellChecker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 객체 생성 방지</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">suggestions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> typo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>싱글턴으로 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpellChecker</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Dictionary</span> dictionary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SpellChecker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SpellChecker</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpellChecker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">suggestions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> typo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>정적 유틸리티 클래스와 싱글턴으로 구현하게 되면, 유연하지 않고 테스트하기 어렵다는 단점이 있다.</p>\n</li>\n</ul>\n<p>사전은 일반 사전만 있는 것이 아닌 영어 사전, 국어 사전, 불어 사전 등 언어별로 따로 있을 수 있고, 고대 영어 사전과 같이 특수 어휘용 사전을 따로 둘 수도 있다. </p>\n<p>그런데 방금 구현한 방법으로는 여러 가지 사전을 사용하도록 할 수 없다. 사용할 수 있도록 만드려면, <code class=\"language-text\">EngSpellChecker</code>, <code class=\"language-text\">KorSpellChecker</code> 클래스를 만들고 그 안에 각각 해당하는 <code class=\"language-text\">EngDictionary</code>, <code class=\"language-text\">KorDictionary</code> 클래스를 선언하는 복잡한 방식을 거쳐야 할 것 이다.</p>\n<p>따라서 사용하는 자원에 따라 동작이 달라지는 클래스의 경우에는, </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Dictionary</span> dictionary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>정적 유틸리티 클래스와 싱글턴처럼 자원을 직접 명시하는 것이 아니라 의존 객체 주입을 사용하면 된다.</p>\n<h3>의존 객체 주입</h3>\n<p>의존 객체 주입 방법은 인스턴스를 생성할 때 필요한 자원을 넘겨주면 된다.\n대신 의존 객체인 이 <code class=\"language-text\">Dictionary</code>는 <code class=\"language-text\">interface</code>여야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpellChecker</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Dictionary</span> dictionary<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SpellChecker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dictionary</span> dictionary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dictionary <span class=\"token operator\">=</span> dictionary<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">suggestions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> typo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=171196410\">이펙티브 자바</a></li>\n<li><a href=\"https://www.inflearn.com/course/%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C-%EC%9E%90%EB%B0%94-1/dashboard\">이펙티브 자바 완벽 공략 1부</a></li>\n</ul>","frontmatter":{"title":"[Effective Java] Item 5 - 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라","date":"May 16, 2022","update":"May 16, 2022","tags":["Java","Effective Java"],"series":"이펙티브 자바 뽀개기"},"fields":{"slug":"/2022-05-16-effective-java-5/","readingTime":{"minutes":2.915}}},"seriesList":{"edges":[{"node":{"id":"690c77b6-8c55-52b8-a334-a43437b12181","fields":{"slug":"/2022-05-02-effective-java-1/"},"frontmatter":{"title":"[Effective Java] Item 1 - 생성자 대신 정적 팩터리 메서드를 고려하라"}}},{"node":{"id":"8c91a468-9765-51d6-91c0-133a46b7053c","fields":{"slug":"/2022-05-03-effective-java-2/"},"frontmatter":{"title":"[Effective Java] Item 2 - 생성자에 매개변수가 많다면 빌더를 고려하라"}}},{"node":{"id":"9f19d48e-bb0a-58e9-b29c-d423323a1b33","fields":{"slug":"/2022-05-09-effective-java-3/"},"frontmatter":{"title":"[Effective Java] Item 3 - private 생성자나 열거 타입으로 싱글턴임을 보증하라"}}},{"node":{"id":"cd050bcf-7c86-5d3b-8683-bab3f5da6324","fields":{"slug":"/2022-05-10-effective-java-4/"},"frontmatter":{"title":"[Effective Java] Item 4 - 인스턴스화를 막으려거든 private 생성자를 사용하라"}}},{"node":{"id":"72be9954-c9b6-5c25-9a31-32d03fb85256","fields":{"slug":"/2022-05-16-effective-java-5/"},"frontmatter":{"title":"[Effective Java] Item 5 - 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라"}}}]},"previous":{"fields":{"slug":"/2022-05-10-effective-java-4/"},"frontmatter":{"title":"[Effective Java] Item 4 - 인스턴스화를 막으려거든 private 생성자를 사용하라"}},"next":null},"pageContext":{"id":"72be9954-c9b6-5c25-9a31-32d03fb85256","series":"이펙티브 자바 뽀개기","previousPostId":"cd050bcf-7c86-5d3b-8683-bab3f5da6324","nextPostId":null}},"staticQueryHashes":[]}