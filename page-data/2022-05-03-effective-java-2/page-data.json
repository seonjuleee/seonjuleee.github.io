{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-05-03-effective-java-2/","result":{"data":{"site":{"siteMetadata":{"title":"수학하는 개발자"}},"markdownRemark":{"id":"8c91a468-9765-51d6-91c0-133a46b7053c","excerpt":"선택적 매개변수가 많을 때는 정적 팩터리 메서드와 생성자 모두 적절하게 대응하기가 힘든데, 빌더 패턴을 사용하면 해결 가능하다. 점층적 생성자 패턴(Telescoping constructor pattern) 빌더 패턴을 설명하기 전, 비교를 위해 다른 패턴들을 살펴보자. 빌더 패턴 전에는 점층적 생성자 패턴을 사용하여 이 문제를 해결했다고 한다.  클래스…","html":"<p>선택적 매개변수가 많을 때는 정적 팩터리 메서드와 생성자 모두 적절하게 대응하기가 힘든데, <strong>빌더 패턴</strong>을 사용하면 해결 가능하다.</p>\n<h3>점층적 생성자 패턴(Telescoping constructor pattern)</h3>\n<p>빌더 패턴을 설명하기 전, 비교를 위해 다른 패턴들을 살펴보자. 빌더 패턴 전에는 점층적 생성자 패턴을 사용하여 이 문제를 해결했다고 한다.</p>\n<p><code class=\"language-text\">Student</code> 클래스로 예를 들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 매개변수를 선택하여 생성할 수 있도록 만들어보면, 점층적 생성자 패턴의 경우는 다음과 같이 만들어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> number<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 클래스를 생성하려면 원하는 매개변수를 모두 포함한 생성자 중, 가장 짧은 것을 골라 호출하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"서울시\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"010-1234-5678\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서 만약에 <code class=\"language-text\">address</code>를 뺀 <code class=\"language-text\">name</code>, <code class=\"language-text\">number</code> 변수만 가지고 객체를 생성하려면 다음 나타낸 것처럼 <code class=\"language-text\">address</code> 값을 <code class=\"language-text\">null</code>로 주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"010-1234-5678\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>점층적 생성자 패턴은 </p>\n<ul>\n<li>사용자가 설정하기를 원치 않는 매개변수도 값을 지정해야함</li>\n<li>매개변수 개수가 많아지면 클라이언트 코드가 복잡해짐</li>\n</ul>\n<p>이런 단점을 가지고 있다.</p>\n<h3>자바빈즈 패턴(JavaBeans pattern)</h3>\n<p>자바빈즈 패턴은 매개변수가 없는 생성자로 객체를 만든 후, setter 메서드로 매개변수의 값을 설정하는 방식의 패턴이다.</p>\n<p>자바빈즈 패턴으로 <code class=\"language-text\">Member</code> 클래스를 나타내보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// setter 메서드</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자바빈즈 패턴은 점층적 생성자 패턴과는 달리 복잡하지 않지만,</p>\n<ul>\n<li>객체 하나를 생성하기 위해 메서드를 여러 개 호출해야 함</li>\n<li>객체 생성 전까지 일관성(consistency)이 무너짐</li>\n<li>일관성이 무너지기 때문에 불변으로 생성 불가</li>\n</ul>\n<p>하다는 단점을 가지고 있다.</p>\n<h3>빌더 패턴(Builder pattern)</h3>\n<p>빌더 패턴은 빌더 객체를 이용하여 선택 매개변수를 설정할 수 있다.</p>\n<p>빌더 패턴으로 만든 <code class=\"language-text\">Member</code> 클래스를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> number<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 필수 매개변수</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 선택 매개변수 - 기본값으로 초기화</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            address <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            number <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        name <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n        address <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">;</span>\n        number <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Member</code> 클래스를 생성하려면 다음처럼 연쇄적으로 메서드를 호출시키면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"서울시\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"010-1234-5678\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>계층적인 클래스에서의 빌더 패턴</h3>\n<p>빌더 패턴은 계층구조를 가진 클래스에서 사용하기 좋다. 추상 클래스는 추상 빌더를, 구체 클래스(concrete class)는 구체 빌더를 가지게 한다.</p>\n<p>책의 예시에 있는 <code class=\"language-text\">Pizza</code> 추상 클래스를 자세하게 보자.</p>\n<p>먼저 <code class=\"language-text\">Pizza</code> 클래스는 토핑과 토핑을 <code class=\"language-text\">Set</code>으로 엮은 toppings를 인스턴스로 가진다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Topping</span> <span class=\"token punctuation\">{</span> HAM<span class=\"token punctuation\">,</span> MUSHROOM<span class=\"token punctuation\">,</span> ONION<span class=\"token punctuation\">,</span> PEPPER<span class=\"token punctuation\">,</span> SAUSAGE<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings<span class=\"token punctuation\">;</span></code></pre></div>\n<p>추상 클래스이므로 클래스를 생성하는 추상 빌더를 이렇게 나타낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Pizza.Builder 클래스는 제네릭 타입으로, Builder 타입만 사용되도록 제한되었다고 생각하면 좋다.</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// toppings는 선택 매개변수로 EnumSet.noneOf를 통해 초기화 됨</span>\n    <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// topping을 더해 자기 자신을 반환</span>\n    <span class=\"token comment\">// Member 예제의 address와 같은 역할</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">addTopping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span> topping<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        toppings<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>topping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Pizza</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 하위 클래스는 이 메서드를 overring하여 \"this\"를 반환하도록 해야한다.</span>\n    <span class=\"token comment\">// self를 더해 하위클래스에서는 형변환 하지 않고도 메서드 연쇄를 지원할 수 있다.</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">T</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>빌더를 통해 <code class=\"language-text\">Pizza</code>를 생성하는 코드는 <code class=\"language-text\">Builder</code>에서 <code class=\"language-text\">addTopping</code>을 통해 추가된 <code class=\"language-text\">toppings</code>를 <code class=\"language-text\">Pizza</code>의 <code class=\"language-text\">toppings</code>에 <code class=\"language-text\">clone</code>하도록 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toppings <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>toppings<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>합치면 <code class=\"language-text\">Pizza</code> 추상 클래스는 이렇게 구성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Topping</span> <span class=\"token punctuation\">{</span> HAM<span class=\"token punctuation\">,</span> MUSHROOM<span class=\"token punctuation\">,</span> ONION<span class=\"token punctuation\">,</span> PEPPER<span class=\"token punctuation\">,</span> SAUSAGE<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">addTopping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span> topping<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            toppings<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>topping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Pizza</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">T</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        toppings <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>toppings<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>추상 클래스로 정의한 <code class=\"language-text\">Pizza</code>에 뉴욕 피자인 <code class=\"language-text\">NyPizza</code>, 칼조네 피자인 <code class=\"language-text\">Calzone</code> 두 하위 클래스가 있다고 하자. 그러면 빌더 패턴으로 나타낸 클래스는 다음처럼 표현된다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">NyPizza</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NyPizza</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Size</span> <span class=\"token punctuation\">{</span> SMALL<span class=\"token punctuation\">,</span> MEDIUM<span class=\"token punctuation\">,</span> LARGE <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Size</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// NyPizza에는 size가 필수 매개변수</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza<span class=\"token punctuation\">.</span>Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Size</span> size<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Size</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Pizza 클래스에 있는 build 추상 메서드에 NyPizza를 반환하도록 구현</span>\n    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">NyPizza</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NyPizza</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// self도 this를 반환하도록 구현</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">NyPizza</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    size <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Calzone</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calzone</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> sauceInside<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Calzone에는 sauceInside가 필수 매개변수</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pizza<span class=\"token punctuation\">.</span>Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Builder</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> sauceInside <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기본값</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">sauceInside</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sauceInside <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Pizza 클래스에 있는 build 추상 메서드에 Calzone를 반환하도록 구현</span>\n    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Calzone</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Calzone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// self도 this를 반환하도록 구현</span>\n    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Builder</span> <span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Calzone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sauceInside <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>sauceInside<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>이렇게 빌더 패턴을 계층적으로 설계하면 <code class=\"language-text\">NyPizza</code>와 <code class=\"language-text\">Calzone</code>를 구현하는 클라이언트 코드는 간단하게 나타낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">NyPizza</span> pizza <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NyPizza<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NyPizza<span class=\"token punctuation\">.</span>Size</span><span class=\"token punctuation\">.</span>SMALL<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">addTopping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pizza<span class=\"token punctuation\">.</span>Topping</span><span class=\"token punctuation\">.</span>SAUSAGE<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">addTopping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pizza<span class=\"token punctuation\">.</span>Topping</span><span class=\"token punctuation\">.</span>ONION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Calzone</span> calzone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Calzone<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">addTopping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pizza<span class=\"token punctuation\">.</span>Topping</span><span class=\"token punctuation\">.</span>HAM<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">sauceInside</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>빌더 패턴은 매우 유연하게 사용할 수 있다는 장점이 크다. Lombok 라이브러리를 사용하면 <code class=\"language-text\">@Builder</code> 어노테이션 하나로 빌더 패턴을 더 쉽게 구현할 수 있다. </p>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=171196410\">이펙티브 자바</a></li>\n</ul>","frontmatter":{"title":"[Effective Java] Item 2 - 생성자에 매개변수가 많다면 빌더를 고려하라","date":"May 03, 2022","update":"May 03, 2022","tags":["Java","Effective Java"],"series":"이펙티브 자바 뽀개기"},"fields":{"slug":"/2022-05-03-effective-java-2/","readingTime":{"minutes":8.62}}},"seriesList":{"edges":[{"node":{"id":"690c77b6-8c55-52b8-a334-a43437b12181","fields":{"slug":"/2022-05-02-effective-java-1/"},"frontmatter":{"title":"[Effective Java] Item 1 - 생성자 대신 정적 팩터리 메서드를 고려하라"}}},{"node":{"id":"8c91a468-9765-51d6-91c0-133a46b7053c","fields":{"slug":"/2022-05-03-effective-java-2/"},"frontmatter":{"title":"[Effective Java] Item 2 - 생성자에 매개변수가 많다면 빌더를 고려하라"}}},{"node":{"id":"9f19d48e-bb0a-58e9-b29c-d423323a1b33","fields":{"slug":"/2022-05-09-effective-java-3/"},"frontmatter":{"title":"[Effective Java] Item 3 - private 생성자나 열거 타입으로 싱글턴임을 보증하라"}}},{"node":{"id":"cd050bcf-7c86-5d3b-8683-bab3f5da6324","fields":{"slug":"/2022-05-10-effective-java-4/"},"frontmatter":{"title":"[Effective Java] Item 4 - 인스턴스화를 막으려거든 private 생성자를 사용하라"}}}]},"previous":{"fields":{"slug":"/2022-05-02-effective-java-1/"},"frontmatter":{"title":"[Effective Java] Item 1 - 생성자 대신 정적 팩터리 메서드를 고려하라"}},"next":{"fields":{"slug":"/2022-05-09-effective-java-3/"},"frontmatter":{"title":"[Effective Java] Item 3 - private 생성자나 열거 타입으로 싱글턴임을 보증하라"}}},"pageContext":{"id":"8c91a468-9765-51d6-91c0-133a46b7053c","series":"이펙티브 자바 뽀개기","previousPostId":"690c77b6-8c55-52b8-a334-a43437b12181","nextPostId":"9f19d48e-bb0a-58e9-b29c-d423323a1b33"}},"staticQueryHashes":[]}