{"componentChunkName":"component---src-templates-series-jsx","path":"/series/이펙티브-자바-뽀개기","result":{"data":{"posts":{"nodes":[{"excerpt":"정적 팩터리 메서드 정적 팩터리 메서드(static factory method)는 클래스의 인스턴스를 반환하는 정적 메서드이다.  예를 몇 가지 들어보자.  클래스의  메서드  클래스의  메서드 두 메서드 다 반환 값이 클래스인 정적 메서드이기 때문에, 객체 생성의 역할을 할 수 있다. 그렇다면 왜 생성자 대신 정적 팩터리 메서드를 고려해야할까? 정적 팩…","fields":{"slug":"/2022-05-02-effective-java-1/"},"frontmatter":{"date":"May 02, 2022","update":"May 02, 2022","title":"[Effective Java] Item 1 - 생성자 대신 정적 팩터리 메서드를 고려하라","tags":["Java","Effective Java"]}},{"excerpt":"선택적 매개변수가 많을 때는 정적 팩터리 메서드와 생성자 모두 적절하게 대응하기가 힘든데, 빌더 패턴을 사용하면 해결 가능하다. 점층적 생성자 패턴(Telescoping constructor pattern) 빌더 패턴을 설명하기 전, 비교를 위해 다른 패턴들을 살펴보자. 빌더 패턴 전에는 점층적 생성자 패턴을 사용하여 이 문제를 해결했다고 한다.  클래스…","fields":{"slug":"/2022-05-02-effective-java-2/"},"frontmatter":{"date":"May 03, 2022","update":"May 03, 2022","title":"[Effective Java] Item 2 - 생성자에 매개변수가 많다면 빌더를 고려하라","tags":["Java","Effective Java"]}}]}},"pageContext":{"series":"이펙티브 자바 뽀개기"}},"staticQueryHashes":[]}