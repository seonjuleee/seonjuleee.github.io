{"componentChunkName":"component---src-templates-series-jsx","path":"/series/이펙티브-자바-뽀개기","result":{"data":{"posts":{"nodes":[{"excerpt":"정적 팩터리 메서드 정적 팩터리 메서드(static factory method)는 클래스의 인스턴스를 반환하는 정적 메서드이다.  예를 몇 가지 들어보자.  클래스의  메서드  클래스의  메서드 두 메서드 다 반환 값이 클래스인 정적 메서드이기 때문에, 객체 생성의 역할을 할 수 있다. 그렇다면 왜 생성자 대신 정적 팩터리 메서드를 고려해야할까? 정적 팩…","fields":{"slug":"/2022-05-02-effective-java-1/"},"frontmatter":{"date":"May 02, 2022","update":"May 02, 2022","title":"[Effective Java] Item 1 - 생성자 대신 정적 팩터리 메서드를 고려하라","tags":["Java","Effective Java"]}},{"excerpt":"선택적 매개변수가 많을 때는 정적 팩터리 메서드와 생성자 모두 적절하게 대응하기가 힘든데, 빌더 패턴을 사용하면 해결 가능하다. 점층적 생성자 패턴(Telescoping constructor pattern) 빌더 패턴을 설명하기 전, 비교를 위해 다른 패턴들을 살펴보자. 빌더 패턴 전에는 점층적 생성자 패턴을 사용하여 이 문제를 해결했다고 한다.  클래스…","fields":{"slug":"/2022-05-03-effective-java-2/"},"frontmatter":{"date":"May 03, 2022","update":"May 03, 2022","title":"[Effective Java] Item 2 - 생성자에 매개변수가 많다면 빌더를 고려하라","tags":["Java","Effective Java"]}},{"excerpt":"싱글턴(singleton) 객체의 인스턴스를 오직 1개만 생성할 수 있는 클래스. 생성자의 호출이 반복적으로 이뤄져도 객체는 최초 생성된 객체를 반환해준다. 클래스를 싱글턴으로 만드는 이유? 메모리 낭비를 방지할 수 있다 최초 한 번 생성하면 이후에도 고정된 메모리 영역을 사용하기 때문에 객체에 접근할 때 메모리 낭비를 방지할 수 있다. 다른 클래스 간에…","fields":{"slug":"/2022-05-09-effective-java-3/"},"frontmatter":{"date":"May 09, 2022","update":"May 09, 2022","title":"[Effective Java] Item 3 - private 생성자나 열거 타입으로 싱글턴임을 보증하라","tags":["Java","Effective Java"]}},{"excerpt":"정적 멤버만 담은 유틸리티 클래스 정적 메서드와 정적 필드만을 담은 단순한 클래스는 다음과 같이 사용된다. 기본 타입 값이나 배열 관련 메서드 모으기 ex. ,  인터페이스를 구현하는 객체를 생성해주는 정적 메서드(또는 팩터리)를 모으기 ex.  final 클래스와 관련한 메서드 모으기 final 클래스를 상속받아 메서드에 넣을 수 없기 때문이다. 이런 …","fields":{"slug":"/2022-05-10-effective-java-4/"},"frontmatter":{"date":"May 10, 2022","update":"May 10, 2022","title":"[Effective Java] Item 4 - 인스턴스화를 막으려거든 private 생성자를 사용하라","tags":["Java","Effective Java"]}}]}},"pageContext":{"series":"이펙티브 자바 뽀개기"}},"staticQueryHashes":[]}