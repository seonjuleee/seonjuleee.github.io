{"componentChunkName":"component---src-templates-post-jsx","path":"/2021-01-21-springboot-validation/","result":{"data":{"site":{"siteMetadata":{"title":"수학하는 개발자"}},"markdownRemark":{"id":"9fd56c7a-085f-528a-802a-22b61fe74bb5","excerpt":"Validation 데이터 유효성을 검사하는 로직은 애플리케이션 전체에 분산 코드 중복이 심함 비즈니스 로직에 섞여있음 이라는 문제를 가지고 있어서 기능을 추가, 수정하기 어렵고 오류 발생 가능성도 크다. Java에서 Bean Validation이라는 데이터 유효성 검사 프레임워크를 제공하는데, 다양한 제약(Constraint)을 도메인 모델(Domain…","html":"<h3>Validation</h3>\n<ul>\n<li>\n<p>데이터 유효성을 검사하는 로직은</p>\n<ol>\n<li>애플리케이션 전체에 분산</li>\n<li>코드 중복이 심함</li>\n<li>비즈니스 로직에 섞여있음</li>\n</ol>\n</li>\n</ul>\n<p>이라는 문제를 가지고 있어서 기능을 추가, 수정하기 어렵고 오류 발생 가능성도 크다.</p>\n<ul>\n<li>Java에서 Bean Validation이라는 데이터 유효성 검사 프레임워크를 제공하는데, 다양한 제약(Constraint)을 도메인 모델(Domain Model)에 어노테이션(Annotation)으로 간단하게 정의할 수 있어서 위의 문제를 해결할 수 있다.</li>\n</ul>\n<h3>gradle 설정</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">implementation('org.springframework.boot:spring-boot-starter-validation')</code></pre></div>\n<ul>\n<li><code class=\"language-text\">spring-boot-starter-web</code>을 넣었다면, Bean Validation이 포함되어 있어서 따로 추가할 필요가 없다고 한다.</li>\n</ul>\n<h3>제약 설정</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonForm</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@NotNull</span>\n\t<span class=\"token annotation punctuation\">@Size</span><span class=\"token punctuation\">(</span>min<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> max<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@NotNull</span>\n\t<span class=\"token annotation punctuation\">@Min</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>이런 식으로 어노테이션을 이용해 도메인의 제약 설정을 할 수 있다.</li>\n<li><code class=\"language-text\">@NotNull</code> : null 검증</li>\n<li><code class=\"language-text\">@Min</code> : 최솟값 검증</li>\n<li><code class=\"language-text\">@Max</code> : 최댓값 검증</li>\n<li><code class=\"language-text\">@Size</code> : 범위 검증</li>\n<li><code class=\"language-text\">@Email</code> : 이메일 검증</li>\n<li><code class=\"language-text\">@AssertTrue</code> : true 검증</li>\n<li><code class=\"language-text\">@NotEmpty</code> : null이나 size가 0 검증</li>\n<li><code class=\"language-text\">@NotBlank</code> : null이나 whitespace 검증</li>\n<li><code class=\"language-text\">@Positive</code>, <code class=\"language-text\">@PositiveOrZero</code> : 숫자 검증</li>\n<li><code class=\"language-text\">@Negative</code>, <code class=\"language-text\">@NegativeOrZero</code> : 숫자 검증</li>\n<li><code class=\"language-text\">@Past</code>, <code class=\"language-text\">@PastOrPresent</code> : 날짜 검증</li>\n<li><code class=\"language-text\">@Future</code>, <code class=\"language-text\">@FutureOrPresent</code> : 날짜 검증</li>\n</ul>\n<h3>Controller</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">checkPersonInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Valid</span> <span class=\"token class-name\">PersonForm</span> personForm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BindingResult</span> bindingResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bindingResult<span class=\"token punctuation\">.</span><span class=\"token function\">hasErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"form\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:/results\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>유효성 검사를 하려는 Entity에 <code class=\"language-text\">@Valid</code> 어노테이션을 붙이고, BindingResult를 통해 결과를 받음</p>\n<h3>Front End</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>Name:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>field</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*{name}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${#fields.hasErrors(<span class=\"token punctuation\">'</span>name<span class=\"token punctuation\">'</span>)}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>errors</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*{name}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Name</code></pre></div>\n<p>유효성 검사를 하려는 부분에 <code class=\"language-text\">th:if</code>와 <code class=\"language-text\">th:errors</code>를 통해 에러처리를 할 수 있다.</p>\n<h3>Validator</h3>\n<ul>\n<li>어노테이션 만으로 유효성 검사를 하는 것은 편리하지만 자유도에 제약이 있는데, Validator로 커스텀을 할 수 있다.</li>\n</ul>\n<p><code class=\"language-text\">org.springframework.validation.Validator</code>에 있는 Validator 인터페이스를 구현하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Validator</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/**\n     * This Validator validates only Person instances\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Errors</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ValidationUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">rejectIfEmpty</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name.empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">rejectValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"negativevalue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">110</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">rejectValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"too.darn.old\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>출처</h3>\n<ul>\n<li><a href=\"https://meetup.toast.com/posts/223\">Validation 어디까지 해봤니?</a></li>\n<li><a href=\"https://heowc.dev/2018/01/14/spring-boot-hibernate-validation/\">Spring Boot - Validation</a></li>\n<li><a href=\"https://spring.io/guides/gs/validating-form-input/\">Validating Form Input</a></li>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#validation\">Validation by Using Spring’s Validator Interface</a></li>\n</ul>","frontmatter":{"title":"Spring Boot Validation","date":"January 21, 2021","update":"January 21, 2021","tags":["Spring Boot"],"series":null},"fields":{"slug":"/2021-01-21-springboot-validation/","readingTime":{"minutes":2.815}}},"seriesList":{"edges":[{"node":{"id":"acabd04c-92ae-5538-9eda-fbd68fa87c9c","fields":{"slug":"/2020-07-23-github-blog-theme/"},"frontmatter":{"title":"blog 테마 바꾸기"}}},{"node":{"id":"1954ad40-36c7-5e67-98e1-595777294f85","fields":{"slug":"/2020-07-23-java-stack-class/"},"frontmatter":{"title":"Java - Stack 클래스"}}},{"node":{"id":"ad32dcd2-82c4-5a1c-b79a-a245ebc8e108","fields":{"slug":"/2020-07-23-baekjoon-10828/"},"frontmatter":{"title":"백준 10828 - 스택"}}},{"node":{"id":"4d8da4db-1a95-5a14-a254-11b7f604fa00","fields":{"slug":"/2020-08-04-baekjoon-2164/"},"frontmatter":{"title":"백준 2164 - 카드2"}}},{"node":{"id":"8e506019-dffd-5699-91b5-e0b7bae6b9e9","fields":{"slug":"/2020-08-04-baekjoon-10866/"},"frontmatter":{"title":"백준 10866 - 덱"}}},{"node":{"id":"34d956db-2852-5fdc-beaa-cc591d851745","fields":{"slug":"/2020-08-04-java-deque-class/"},"frontmatter":{"title":"Java - Deque 클래스"}}},{"node":{"id":"246c6841-1aa1-553c-91f3-ffa7ad61c9fb","fields":{"slug":"/2020-08-04-java-queue-class/"},"frontmatter":{"title":"Java - Queue 클래스"}}},{"node":{"id":"955aca9d-f57e-58e2-8b37-81142b4a3ebf","fields":{"slug":"/2020-10-22-java-data-type/"},"frontmatter":{"title":"자바의 기본 자료형 종류와 저장 가능 범위"}}},{"node":{"id":"1c3efb4a-6214-5345-9d04-e8b7298fe741","fields":{"slug":"/2020-10-23-euclidean-algorithm/"},"frontmatter":{"title":"유클리드 호제법(최대공약수 구하기)"}}},{"node":{"id":"db9b7a6e-4fc8-5aab-b9fb-143f6895295a","fields":{"slug":"/2020-10-23-java-stringbuilder/"},"frontmatter":{"title":"Java - StringBuilder"}}},{"node":{"id":"2246c900-3c63-5ffe-9fb4-e40246faf0c6","fields":{"slug":"/2020-10-26-java-interface/"},"frontmatter":{"title":"Java - Interface"}}},{"node":{"id":"dbb25697-0316-5712-b558-82752dbd1e25","fields":{"slug":"/2020-10-27-java-optional/"},"frontmatter":{"title":"Java - Optional"}}},{"node":{"id":"fc0aba60-650a-5df0-8970-2bac6f454a71","fields":{"slug":"/2020-11-26-baekjoon-7576/"},"frontmatter":{"title":"백준 7576 - 토마토"}}},{"node":{"id":"4ea752b1-8a8d-5f05-b43b-980d028a635c","fields":{"slug":"/2020-12-22-thymeleaf-syntax/"},"frontmatter":{"title":"Thymeleaf 문법 정리"}}},{"node":{"id":"7d2577b9-3761-5e26-b133-4a7f9a060fba","fields":{"slug":"/2020-12-23-thymeleaf-fragment/"},"frontmatter":{"title":"Thymeleaf fragment"}}},{"node":{"id":"ae5a9388-053b-53fd-bbfb-f19b2bb2ffef","fields":{"slug":"/2020-12-25-springboot-mysql-jpa/"},"frontmatter":{"title":"Spring Boot JPA, MySQL 연동"}}},{"node":{"id":"9fd56c7a-085f-528a-802a-22b61fe74bb5","fields":{"slug":"/2021-01-21-springboot-validation/"},"frontmatter":{"title":"Spring Boot Validation"}}},{"node":{"id":"3af470a2-7748-5749-a77e-afaef46dca58","fields":{"slug":"/2021-03-11-algorithm-programmers-1/"},"frontmatter":{"title":"[프로그래머스] 완주하지 못한 선수"}}},{"node":{"id":"cca2f4c4-b72f-5662-b29b-f12f560c614b","fields":{"slug":"/2021-04-28-algorithm-programmers-2/"},"frontmatter":{"title":"[프로그래머스] 타겟 넘버"}}},{"node":{"id":"ef2c0006-a175-56de-b03a-3a65e1540a95","fields":{"slug":"/2021-04-30-algorithm-programmers-3/"},"frontmatter":{"title":"[프로그래머스] 네트워크"}}},{"node":{"id":"8084e52f-0425-5330-ace8-d9f5642f83e6","fields":{"slug":"/2021-05-01-algorithm-programmers-4/"},"frontmatter":{"title":"[프로그래머스] 단어 변환"}}},{"node":{"id":"972e51bc-dabc-5248-a41d-5db617cfc86d","fields":{"slug":"/2021-05-03-algorithm-programmers-5/"},"frontmatter":{"title":"[프로그래머스] 여행경로"}}},{"node":{"id":"64c52cc6-ee1e-50fc-adc2-36a3c03bccf2","fields":{"slug":"/2021-05-05-algorithm-programmers-6/"},"frontmatter":{"title":"[프로그래머스] 기능개발"}}},{"node":{"id":"8937358a-2a3d-5c07-8184-cd64240b2c88","fields":{"slug":"/2021-05-06-algorithm-programmers-7/"},"frontmatter":{"title":"[프로그래머스] 프린터"}}},{"node":{"id":"62d81f8e-d421-548b-9280-2de435c030e7","fields":{"slug":"/2021-05-08-algorithm-programmers-8/"},"frontmatter":{"title":"[프로그래머스] 다리를 지나는 트럭"}}},{"node":{"id":"2fde7462-e33f-5da2-abee-2fba66303822","fields":{"slug":"/2021-05-09-algorithm-programmers-9/"},"frontmatter":{"title":"[프로그래머스] 주식 가격"}}},{"node":{"id":"3bd76614-bd81-5f98-82ea-cbbf59e23ee3","fields":{"slug":"/2021-05-11-algorithm-programmers-10/"},"frontmatter":{"title":"[프로그래머스] 전화번호 목록"}}},{"node":{"id":"8c4ec693-695f-58b1-9f80-af294c9f272e","fields":{"slug":"/2021-05-13-algorithm-programmers-11/"},"frontmatter":{"title":"[프로그래머스] 위장"}}},{"node":{"id":"5fe29037-bdfc-5f33-83ef-adb3224cd850","fields":{"slug":"/2021-05-15-algorithm-programmers-12/"},"frontmatter":{"title":"[프로그래머스] 베스트 앨범"}}},{"node":{"id":"4ff75e2c-ba95-5112-be03-5f243b8bba03","fields":{"slug":"/2021-05-16-algorithm-programmers-13/"},"frontmatter":{"title":"[프로그래머스] 더 맵게"}}},{"node":{"id":"230d3627-431e-5365-adf0-ef85bd9b5083","fields":{"slug":"/2021-05-18-algorithm.programmers-14/"},"frontmatter":{"title":"[프로그래머스] 디스크 컨트롤러"}}},{"node":{"id":"c3d545a9-29cb-5f16-8ff0-52d4db3b26a5","fields":{"slug":"/2021-05-19-algorithm-programmers-15/"},"frontmatter":{"title":"[프로그래머스] 이중우선순위큐"}}},{"node":{"id":"8c930bc0-d5c5-5955-8088-3b588786128d","fields":{"slug":"/2021-05-20-algorithm-programmers-16/"},"frontmatter":{"title":"[프로그래머스] K번째수"}}},{"node":{"id":"9878dd11-6c29-510c-890d-dc3e898e40c8","fields":{"slug":"/2021-05-21-algorithm-programmers-17/"},"frontmatter":{"title":"[프로그래머스] 가장 큰 수"}}},{"node":{"id":"e6306a22-5f1e-5d2e-a615-16eca3fc97fe","fields":{"slug":"/2021-05-22-java-collection/"},"frontmatter":{"title":"Java Collection"}}},{"node":{"id":"e90a09af-4ad4-5db9-b4b5-6cb90fb3f47d","fields":{"slug":"/2021-05-23-algorithm-programmers-18/"},"frontmatter":{"title":"[프로그래머스] H-Index"}}},{"node":{"id":"d113e6fb-48c6-5e93-9b18-da0e9b51d025","fields":{"slug":"/2021-05-26-algorithm-programmers-19/"},"frontmatter":{"title":"[프로그래머스] 모의고사"}}},{"node":{"id":"37cacf0d-e0a7-5123-9cd1-99172f54c79d","fields":{"slug":"/2021-05-27-algorithm-programmers-20/"},"frontmatter":{"title":"[프로그래머스] 소수 찾기"}}},{"node":{"id":"4babda6f-2bac-57c4-9d9b-68e291edaa39","fields":{"slug":"/2021-05-28-algorithm-programmers-21/"},"frontmatter":{"title":"[프로그래머스] 카펫"}}},{"node":{"id":"566b96cf-78d2-5cfe-a1c2-914f846491d5","fields":{"slug":"/2021-05-30-algorithm-programmers-22/"},"frontmatter":{"title":"[프로그래머스] 체육복"}}},{"node":{"id":"d5c2c51e-a145-5135-b40e-0ac1c607f814","fields":{"slug":"/2021-06-29-algorithm-programmers-23/"},"frontmatter":{"title":"[프로그래머스] 조이스틱"}}},{"node":{"id":"265c71b9-01f3-5bb0-815e-09e20bd5469f","fields":{"slug":"/2021-07-10-greedy-algorithm/"},"frontmatter":{"title":"Greedy Algorithm"}}},{"node":{"id":"378a5dac-ccf1-5047-a646-85e32ed95624","fields":{"slug":"/2021-07-16-programmers-algorithm-24/"},"frontmatter":{"title":"[프로그래머스] 3진법 뒤집기"}}},{"node":{"id":"42f43055-d949-581c-9be7-bbbd5bcdcaef","fields":{"slug":"/2021-07-18-programmers-algorithm-25/"},"frontmatter":{"title":"[프로그래머스] 두 개 뽑아서 더하기"}}},{"node":{"id":"7610fa46-6f18-5b4e-b46d-383f29a992c4","fields":{"slug":"/2021-07-23-programmers-algorithm-26/"},"frontmatter":{"title":"[프로그래머스] 삼각 달팽이"}}},{"node":{"id":"194bc5e0-6056-5172-a318-cae736c6aa3a","fields":{"slug":"/2021-07-25-algorithm-programmers-27/"},"frontmatter":{"title":"[프로그래머스] 이진 변환 반복하기"}}},{"node":{"id":"328a8442-4b76-56e6-8e3e-2b53052a49a3","fields":{"slug":"/2021-07-25-algorithm-programmers-28/"},"frontmatter":{"title":"[프로그래머스] 쿼드 압축 후 개수 세기"}}},{"node":{"id":"c23c4e02-565f-59ec-af74-ab0401c19534","fields":{"slug":"/2021-12-07-algorithm-programmers-30/"},"frontmatter":{"title":"[프로그래머스] 소수 만들기"}}},{"node":{"id":"a4f5a9af-f76a-52d9-aafa-456c06b31eea","fields":{"slug":"/2021-12-09-algorithm-programmers-31/"},"frontmatter":{"title":"[프로그래머스] 예산"}}},{"node":{"id":"e7c98424-ebb9-5e30-bc04-7216b27789a5","fields":{"slug":"/2022-04-03-weekly-report/"},"frontmatter":{"title":"3월 다섯째주 주간 회고"}}}]},"previous":{"fields":{"slug":"/2021-01-21-project-board-6/"},"frontmatter":{"title":"게시판 프로젝트 개발 일지 - 6"}},"next":{"fields":{"slug":"/2021-03-11-algorithm-programmers-1/"},"frontmatter":{"title":"[프로그래머스] 완주하지 못한 선수"}}},"pageContext":{"id":"9fd56c7a-085f-528a-802a-22b61fe74bb5","series":null,"previousPostId":"879ac76f-9db8-55a8-99b3-e05f0e6daf98","nextPostId":"3af470a2-7748-5749-a77e-afaef46dca58"}},"staticQueryHashes":[]}