{"componentChunkName":"component---src-templates-post-jsx","path":"/2022-05-27-effective-java-8/","result":{"data":{"site":{"siteMetadata":{"title":"수학하는 개발자"}},"markdownRemark":{"id":"67478475-eb32-5045-b746-6dcb5627dc80","excerpt":"객체를 생성했으면 나중에 사용이 끝났을 때는 없애기도 해야할 것이다. 자바는 두 가지 객체 소멸자를 제공하는데, 바로 와 이다. 그런데, 이 두 소멸자는 기본적으로 사용하지 말아야 한다. 그 이유는 크게 예측할 수 없고, 느리고, 위험하기 때문이다. 좀 더 자세하게 알아보자. 자바에서의 객체 회수 방법 C++에서는 자원을 회수하기 위해 destructor…","html":"<p>객체를 생성했으면 나중에 사용이 끝났을 때는 없애기도 해야할 것이다. 자바는 두 가지 객체 소멸자를 제공하는데, 바로 <code class=\"language-text\">finalizer</code>와 <code class=\"language-text\">cleaner</code>이다.</p>\n<p>그런데, 이 두 소멸자는 기본적으로 사용하지 말아야 한다.</p>\n<p>그 이유는 크게 예측할 수 없고, 느리고, 위험하기 때문이다. 좀 더 자세하게 알아보자.</p>\n<h3>자바에서의 객체 회수 방법</h3>\n<p>C++에서는 자원을 회수하기 위해 destructor가 필요한데, Java에서는 가비지 컬렉터가 이 역할을 담당한다. 따라서 프로그래머는 객체를 회수하려는 작업을 하지 않아도 된다.\n또, 비메모리 자원을 회수할 때는 <code class=\"language-text\">try-with-resources</code>와 <code class=\"language-text\">try-finally</code>를 사용하기 때문에 객체 소멸자를 따로 사용할 이유는 더욱이 없는 것이다.</p>\n<h3><code class=\"language-text\">finalizer</code>와 <code class=\"language-text\">cleaner</code>를 사용하지 말아야 하는 이유</h3>\n<ol>\n<li>즉시 수행된다는 보장이 없다.</li>\n<li>제때 실행되지 않고 가비지 컬렉터 알고리즘에 의해 실행되는 시간이 결정된다. </li>\n<li>실행되기까지 얼마나 걸릴지 알 수 없고 심지어는 실행되지 않을 수도 있다.그렇기 때문에, 중요한 일에 있어서는 큰 오류를 일으킬 수도 있다.</li>\n<li>예외를 잡지 못한다.</li>\n<li><code class=\"language-text\">finalizer</code>는 예외 발생 시 스레드를 중단하여 종료시킨다. 경고조차 출력되지 않으므로 예측하기 어렵다.</li>\n<li><code class=\"language-text\">cleaner</code>는 스레드를 통제하기 때문에 이러한 문제를 발생시키진 않는다.</li>\n<li>심각한 성능 문제를 동반한다.</li>\n<li><code class=\"language-text\">finalizer</code>가 가비지 컬렉터의 효율을 떨어뜨린다.</li>\n<li>안전망 방식을 사용하면 훨씬 빨라질 수 있지만, <code class=\"language-text\">try-with-resources</code>를 이용해 가비지 컬렉터가 객체를 수거하도록 하는 방식보다는 느리다.</li>\n</ol>\n<p>+) <code class=\"language-text\">finalizer</code> 안전망 방식</p>\n<ol start=\"4\">\n<li><code class=\"language-text\">finalizer</code>는 심각한 보안 문제를 일으킬 수도 있다.</li>\n<li>finalizer를 사용하다 예외가 발생하면 가비지 컬렉터가 수집하지 못하게 막는 공격이 발생할 수 있다. </li>\n<li>이 공격은 하위클래스의 finalizer가 실행되어 발생하기 때문에 하위 클래스를 생성할 수 없는 <code class=\"language-text\">final</code>로 선언하면 공격을 방지할 수 있다.</li>\n</ol>\n<h3><code class=\"language-text\">AutoCloseable</code>을 사용하여 자원 회수하기</h3>\n<p><code class=\"language-text\">AutoCloseable</code>을 구현해 <code class=\"language-text\">close</code> 메서드를 호출시키면 finalizer와 cleaner를 대신할 수 있다.</p>\n<p>다만 구현할 때에 인스턴스가 닫혔는지를 추적하는 코드를 추가하면 좋다.</p>\n<h3><code class=\"language-text\">cleaner</code>와 <code class=\"language-text\">finalizer</code>의 적절한 쓰임새</h3>\n<ol>\n<li>안전망 역할</li>\n<li>자원을 사용하는 클라이언트에서 close 메서드를 호출하지 않았을 때를 대비해 안전망 역할로 구현할 수 있다.</li>\n<li>FileInputStream, FileOutputStream, ThreadPoolExecutor 등에서는 안전망 역할의 finalizer를 제공하기도 한다.</li>\n<li>네이티브 피어(native peer)와 연결된 객체에서 사용</li>\n<li>네이티브 피어 : 일반 자바 객체가 기능을 위임한 네이티브 객체</li>\n<li>네이티브 피어는 자바 객체가 아니어서 가비지 컬렉터가 관여할 수 없다. 그러므로 cleaner나 finalizer로 직접 처리할 수 있다.</li>\n<li>다만, 성능 저하를 감당해야하고, 네이티브 피어가 사용하는 자원을 즉시 회수하지 않아도 되어야 한다. 이 경우가 아니라면 AutoCloseable의 close 메서드를 사용해야 한다.</li>\n</ol>\n<h3><code class=\"language-text\">cleaner</code>를 안전망으로 활용하는 <code class=\"language-text\">AutoCloseable</code> 예시</h3>\n<p>방(room) 자원을 회수하기 전에 반드시 청소(clean)해야 한다고 할 때, 자동 청소 안전망인 cleaner는 내부안에서 구현되기 때문에, 클래스의 public API에 나타나지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Room</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutoCloseable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Cleaner</span> cleaner <span class=\"token operator\">=</span> <span class=\"token class-name\">Cleaner</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 청소가 필요한 자원. 절대 Room을 참조해서는 안된다</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 방(Room) 안의 쓰레기 수</span>\n\n        <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numJunkPiles <span class=\"token operator\">=</span> numJunkPiles<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// close 메서드나 cleaner가 호출된다.</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"방 청소\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            numJunkPiles <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 방의 상태. cleanable과 공유한다.</span>\n    <span class=\"token comment\">// 방을 청소할 때 수거할 자원을 담고 있음</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">State</span> state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// cleanable 객체. 수거 대상이 되면 방을 청소한다.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Cleaner<span class=\"token punctuation\">.</span>Cleanable</span> cleanable<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        state <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span>numJunkPiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cleanable <span class=\"token operator\">=</span> cleaner<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cleanable<span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Room</code>의 클라이언트 코드는 다음과 같다. <code class=\"language-text\">Adult</code> 클래스는 <code class=\"language-text\">try-with-resources</code>를 사용하여 잘 짜인 클라이언트이고, <code class=\"language-text\">Teenager</code> 클래스는 청소를 하지 않는 클라이언트이다. <code class=\"language-text\">Teenager</code>에서는 청소되지 않기 때문에 위에서 미리 만들어둔 안전망 <code class=\"language-text\">cleaner</code>로 청소가 될 것이다. 하지만, 진짜로 청소가 이뤄질지는 보장하지 않는다.(실행 여부 조차 모르기 때문이다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Adult</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Room</span> myRoom <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Teenager</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아무렴\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=171196410\">이펙티브 자바</a></li>\n<li><a href=\"https://www.inflearn.com/course/%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C-%EC%9E%90%EB%B0%94-1/dashboard\">이펙티브 자바 완벽 공략 1부</a></li>\n</ul>","frontmatter":{"title":"[Effective Java] Item 8 - finalizer와 cleaner 사용을 피하라","date":"May 27, 2022","update":"May 27, 2022","tags":["Java","Effective Java"],"series":"이펙티브 자바 뽀개기"},"fields":{"slug":"/2022-05-27-effective-java-8/","readingTime":{"minutes":6.655}}},"seriesList":{"edges":[{"node":{"id":"690c77b6-8c55-52b8-a334-a43437b12181","fields":{"slug":"/2022-05-02-effective-java-1/"},"frontmatter":{"title":"[Effective Java] Item 1 - 생성자 대신 정적 팩터리 메서드를 고려하라"}}},{"node":{"id":"8c91a468-9765-51d6-91c0-133a46b7053c","fields":{"slug":"/2022-05-03-effective-java-2/"},"frontmatter":{"title":"[Effective Java] Item 2 - 생성자에 매개변수가 많다면 빌더를 고려하라"}}},{"node":{"id":"9f19d48e-bb0a-58e9-b29c-d423323a1b33","fields":{"slug":"/2022-05-09-effective-java-3/"},"frontmatter":{"title":"[Effective Java] Item 3 - private 생성자나 열거 타입으로 싱글턴임을 보증하라"}}},{"node":{"id":"cd050bcf-7c86-5d3b-8683-bab3f5da6324","fields":{"slug":"/2022-05-10-effective-java-4/"},"frontmatter":{"title":"[Effective Java] Item 4 - 인스턴스화를 막으려거든 private 생성자를 사용하라"}}},{"node":{"id":"72be9954-c9b6-5c25-9a31-32d03fb85256","fields":{"slug":"/2022-05-16-effective-java-5/"},"frontmatter":{"title":"[Effective Java] Item 5 - 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라"}}},{"node":{"id":"894ed220-dda1-5115-a4bc-e5ee0915421b","fields":{"slug":"/2022-05-17-effective-java-6/"},"frontmatter":{"title":"[Effective Java] Item 6 - 불필요한 객체 생성을 피하라"}}},{"node":{"id":"cb022025-20d6-5de4-8c33-1ff906361cb7","fields":{"slug":"/2022-05-24-effective-java-7/"},"frontmatter":{"title":"[Effective Java] Item 7 - 다 쓴 객체 참조를 해제하라"}}},{"node":{"id":"67478475-eb32-5045-b746-6dcb5627dc80","fields":{"slug":"/2022-05-27-effective-java-8/"},"frontmatter":{"title":"[Effective Java] Item 8 - finalizer와 cleaner 사용을 피하라"}}},{"node":{"id":"403415a9-8375-5a23-b96b-541f730c47c4","fields":{"slug":"/2022-06-01-effective-java-9/"},"frontmatter":{"title":"[Effective Java] Item 9 - try-finally보다는 try-with-resources를 사용하라"}}}]},"previous":{"fields":{"slug":"/2022-05-24-effective-java-7/"},"frontmatter":{"title":"[Effective Java] Item 7 - 다 쓴 객체 참조를 해제하라"}},"next":{"fields":{"slug":"/2022-06-01-effective-java-9/"},"frontmatter":{"title":"[Effective Java] Item 9 - try-finally보다는 try-with-resources를 사용하라"}}},"pageContext":{"id":"67478475-eb32-5045-b746-6dcb5627dc80","series":"이펙티브 자바 뽀개기","previousPostId":"cb022025-20d6-5de4-8c33-1ff906361cb7","nextPostId":"403415a9-8375-5a23-b96b-541f730c47c4"}},"staticQueryHashes":[]}